<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.spring.client.board.dao.BoardDAO">

	<!-- 게시판 리스트 기본 조회하는 컬럼. -->
<!--  <select id="boardList" resultType="board">
		select b_num, b_name, b_title, to_char(b_date,'YYYY-MM-DD')as b_date 
		from spring_board
		order by b_num desc
	</select> -->
	
	<!-- 게시판 리스트 검색부분 추가 -->
	<!--  <select id="boardList" resultType="board" parameterType="board">
		select b_num, b_name, b_title, to_char(b_date,'YYYY-MM-DD')as b_date 
		from spring_board
		<where>
			<if test="search=='b_title'">
				<![CDATA[ b_title like '%' || #{keyword} ||'%']]>
			</if>
			<if test="search=='b_name'">
				<![CDATA[ b_name like '%' || #{keyword} ||'%']]>
			</if>
			<if test="search=='b_content'">
				<![CDATA[ b_content like '%' || #{keyword} ||'%']]>
			</if>
		</where>
		order by b_num desc
	</select> -->
	<!-- where 요소는 if에 만족할때만 추가된다.(동적 요소)-순서정렬 전에 조건절을 명시해주어야 한다.
	if 조건에 만족하는 게 없으면, 전체조회.
	keyword에 꺽쇠기호가 들어가면, 단순문자로 변환해주기 위해 CDATA 명시. -->
	
	<sql id="boardSearch">
		<if test="search=='b_title'">
				<![CDATA[ b_title like '%' || #{keyword} ||'%']]>
			</if>
			<if test="search=='b_name'">
				<![CDATA[ b_name like '%' || #{keyword} ||'%']]>
			</if>
			<if test="search=='b_content'">
				<![CDATA[ b_content like '%' || #{keyword} ||'%']]>
			</if>
	</sql><!-- 반복되는 조건문 sql요소로 묶어주기 -->
	
	<!-- 게시판 리스트 조회(검색과 페이징 처리) -->
	<select id="boardList" parameterType="board" resultType="board">
		<![CDATA[
			select b_num,b_name,b_title,to_char(b_date,'YYYY-MM-DD')as b_date
			from(
				select /*+index_desc(spring_board spring_board_pk)*/
						rownum as rnum, b_num, b_name, b_title, b_date from spring_board
				where]]>
				<trim prefix="(" suffix=") and " prefixOverrides="and">
					<include refid="boardSearch"></include>
				</trim>
		<![CDATA[ rownum<=#{pageNum}*#{amount}
				)boardlist
				where rnum>(#{pageNum}-1)*#{amount}
		]]>
	</select>
	<!-- sql로 묶어준 조건문을 include로 참조하여 중복코드를 제거함. -->
	
	<!-- 전체 레코드 수 조회 -->
	<select id="boardListCnt" parameterType="board" resultType="int">
		select count(*)from spring_board
		<trim prefix=" where (" suffix=")" >
			<include refid="boardSearch"></include>
		</trim>
	</select>
	
	<!-- 게시물 등록 -->
	<insert id="boardInsert" parameterType="board">
		insert into spring_board(b_num, b_name, b_title, b_content, b_pwd, b_thumb, b_file)
		values (spring_board_seq.nextval, #{b_name}, #{b_title}, #{b_content}, #{b_pwd}, #{b_thumb}, #{b_file})
	</insert>
	
	<!-- 게시물 등록2 
	<insert id="boardInsert" parameterType="board">
		<selectkey keyProperty="b_num" resultType="int" order="BEFORE">
			select spring_board_seq.nextval from dual
		</selectkey>
		
		insert into spring_board(b_num, b_name, b_title, b_content, b_pwd, b_thumb, b_file)
		values (#{b_num}, #{b_name}, #{b_title}, #{b_content}, #{b_pwd}, #{b_thumb}, #{b_file})
	</insert> -->
	
	<!-- 상세 페이지를 위한 게시물 조회하기 -->
	<select id="boardDetail" resultType="board" parameterType="board">
		select b_num, b_name, b_title, to_char(b_date, 'YYYY-MM-DD HH24:MI:SS')as b_date, b_content
		from spring_board where b_num=#{b_num}
	</select>
	
	<select id="pwdConfirm" parameterType="board" resultType="int">
		select nvl((
			select 1 from spring_board
			where b_num = #{b_num} and b_pwd = #{b_pwd}
		), 0) as state from dual
	</select>
	
	<!-- 게시물 수정하기 -->
	<update id="boardUpdate" parameterType="board">
		update spring_board
			set b_title = #{b_title}
			, b_content=#{b_content}
			, b_date = sysdate
			<if test = "b_pwd != ''">
			, b_pwd = #{b_pwd}
			</if>
		where b_num = #{b_num}
	</update>
	<!-- <if test>는 동적 요소. 데이터베이스 컬럼에서 비밀번호는 not null이지만, 
	수정에서의 비밀번호 입력이 필수는 아니므로 null이 아닌 빈문자로 통제하여 조건을 걸어둔다.
	쉼표를 앞에 두는 이유는 조건절이 걸렸으므로 해당 컬럼 선택이 중복되지 않기 위해 앞에 명시하는 것.
	 -->
	 
	 <delete id="boardDelete" parameterType="board">
	 	delete from spring_board where b_num = #{b_num}
	 </delete>
	 
	 
	 
</mapper>