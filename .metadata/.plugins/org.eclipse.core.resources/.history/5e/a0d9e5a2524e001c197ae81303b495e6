package com.spring.client.board.controller;

import java.util.List;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.spring.client.board.service.BoardService;
import com.spring.client.board.vo.BoardVO;
import com.spring.common.vo.PageDTO;

import lombok.AllArgsConstructor;
import lombok.extern.log4j.Log4j;

@Controller
@RequestMapping("/board/*")
@Log4j
@AllArgsConstructor//생성자로 객체 주입하기
public class BoardController {
	
	//@Setter(onMethod_=@Autowired) 설정자로 외부로부터 객체 주입하기
	private BoardService boardService;
	/* 인스턴스 객체를 가져와야 결합도가 떨어져 수정이 용이해진다.
	그렇다고 구현클래스를 가져오면 오류가 나는 것은 아님. */
	
	@GetMapping("/boardList")
	public String boardList(@ModelAttribute("data") BoardVO bvo, Model model) {
		log.info("boardList 호출 성공!");
		
		List<BoardVO> boardList = boardService.boardList(bvo);
		model.addAttribute("boardList", boardList);
		
		//전체 레코드 수 구현
		int total = boardService.boardListCnt(bvo);
		//페이징처리
		model.addAttribute("pageMaker", new PageDTO(bvo, total));
		//출력되는 글번호 제어
		int count = total - (bvo.getPageNum()-1) *bvo.getAmount();
		model.addAttribute("count", count);
		
		return "board/boardList";
	}
	
/*	@GetMapping("/boardList")
	public String boardList(Model model, BoardVO bvo) {
		log.info("boardList 호출 성공!");
		
		List<BoardVO> boardList = boardService.boardList(bvo);
		model.addAttribute("boardList", boardList);
		
		return "board/boardList";
	} */
	
	// 게시글 입력 폼 출력하기.
	@GetMapping("/writeForm")
	public String writeForm(@ModelAttribute("data") BoardVO bvo) {
		log.info("writeForm 호출 성공");
		
		return "board/writeForm"; 
	}
	
	@RequestMapping(value="/boardInsert", method=RequestMethod.POST)
	public String boardInsert(BoardVO bvo, Model model) throws Exception {//model에 담을 값이 없으므로 제외 가능.
		log.info("boardInsert 호출 성공!");
		
		int result = 0;
		String url="";
		
		result=boardService.boardInsert(bvo);
		if(result==1) { //입력 성공시 게시판 리스트로 이동할 것.
			url = "/board/boardList";
		}else {	//입력 실패시 입력 화면으로 다시 이동.(실패할 일이 없기때문에 제외해도 됨.)
			url = "/board/writeForm";
		} 
		
		return "redirect:"+url;
	}
	
	
	@GetMapping(value="/boardDetail")
	public String boardDetail(@ModelAttribute("data") BoardVO bvo, Model model) {
		log.info("boardDetail 호출 성공 ☆");
		
		BoardVO detail = boardService.boardDetail(bvo);
		model.addAttribute("detail", detail);
		
		return "board/boardDetail";
	}
	
	/* 비밀번호 확인(ajax로 받아오기 때문에 매핑주소가 아닌 결과값을 리턴해준다).
	 * @param b_num
	 * @param b_pwd
	 * @return int로 result를 0또는 1로 리턴할 수도 있고, String으로 "성공 or 실패, 일치 or 불일치"를 리턴할수도 있다.
	 * 
	 * 참고 : @ResponseBody는 전달된 뷰를 통해서 출력하는 것이 아닌 HTTP Response Body에 직접 출력하는 방식이다.
	 * produces 속성은 지정한 미디어 타입과 관련된 응답을 생성하는데 사용한 실제 컨텐트 타입을 보장한다.
	 * 한글 문자로 결과값을 리턴할 경우, UTF-8을 명시해주어야 한다.
	 *  */
	@ResponseBody
	@RequestMapping(value="/pwdConfirm", method=RequestMethod.POST, produces="text/plain; charset=UTF-8")
	public String pwdConfirm(BoardVO bvo) {
		log.info("pwdConfirm 호출 성공!");
		String value="";
		
		//아래 변수에는 입력 성공에 대한 상태값을 저장한다. (1 or 0)
		int result = boardService.pwdConfirm(bvo);
		if(result==1) {
			value="성공";
		}else {
			value="실패";
		}
		log.info("reuslt = "+result);
		
		return value;
	}
	
	//글수정 폼 출력하기
	@RequestMapping(value="/updateForm")
	public String updateForm(@ModelAttribute("date") BoardVO bvo, Model model) {
		log.info("updateForm 호출 성공");
		log.info("b_num = "+bvo.getB_num());
		
		BoardVO updateData = boardService.updateForm(bvo);
		
		model.addAttribute("updateData", updateData);
		return "board/updateForm";
	}
	
	//글수정 확인되면 리스트로 보내기
	/* 참고: RedirectAttributes 객체는 리다이렉트 시점(return "redirect:/경로")에
	 * 한번만 사용되는 데이터를 전송할 수 있는 addFlashAttribute()라는 기능을 지원한다.
	 * addFlashAttribute() 메서드는 브라우저까지 전송되기는 하지만, URI상에는 보이지 않는 숨겨진 데이터의 형태로 전달된다.
	 * 그 자리에서 다시 새로고침하여 재요청하게 되는 경우 오류가 나며, 오류가 나지 않으려면 GET방식으로 전송해야한다. */
	@PostMapping(value="/boardUpdate")
	public String boardUpdate(@ModelAttribute BoardVO bvo, RedirectAttributes ras){
		log.info("boardUpdate 호출 성공 ♪");
		int result = 0;
		String url = "";
		
		result = boardService.boardUpdate(bvo);
		ras.addFlashAttribute("data", bvo);
		
		if(result==1) { //입력 성공시 상세 페이지로 이동할 것.
			//url="/board/boardDetail?b_num="+bvo.getB_num();
			url = "/board/boardDetail";
		}else {	//입력 실패시 수정 화면으로 다시 이동.(실패할 일이 없기때문에 제외해도 됨.)
			//url="/board/updateForm?b_num="+bvo.getB_num();
			url = "/board/updateForm";
		} 
		return "redirect:"+url;
	}
	
	@PostMapping(value="/boardDelete")
	public String boardDelete(@ModelAttribute BoardVO bvo) throws Exception {
		log.info("boardDelete 호출 성공했어유~~");
		
		int result = 0;
		//String url = "";
		result = boardService.boardDelete(bvo);
		//ras.addFlashAttribute("boardVO", bvo);
		/* if(result==1){
		 * 	url="/board/boardList";
		 * }else{
		 * 	url="/board/boardDetail";
		 * } return "redirect:"+url;
			*/
		return "redirect:/board/boardList";
	}
	
	
	
}
