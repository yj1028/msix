package com.spring.common.file;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;

import org.imgscalr.Scalr;
import org.springframework.web.multipart.MultipartFile;

import lombok.extern.log4j.Log4j;
@Log4j
public class FileuploadUtil {
	/* FileUploadUtil 클래스의 모든 메서드는 정적 메서드로 정의한다. 접근방법: 클래스명.메서드명() */
	//파일을 업로드할 폴더 생성.
	public static void makeDir(String docRoot) {
		File fileDir = new File(docRoot);
		if(fileDir.exists()) {
			return;
		}
		fileDir.mkdirs();
	}
	
	/* 파일 업로드 메서드
	 * 파일명이 중복시 해결 방법
	 * System.currentTimeMillis()를 사용하거나 UUID는 128비트의 수이다.
	 * 표준 형식에서 UUID는 32개의 16진수로 표현되며 총 36개 문자(32개 문자와 4개의 하이픈)로 된
	 * 8-4-4-4-12라는 5개의 그룹을 하이픈으로 구분한다.
	 * 이때 UUID.randomUUID().toString()을 이용해서 얻는다.
	 * 50e8400-e29b-41d4-a716-446655440000
	 * 보통 하이픈을 제거하여 유일값을 얻어 중복을 해결한다. */
	public static String fileUpload(MultipartFile file, String fileName)throws IOException{ //String fileName을 받아오는 이유는 폴더를 사용하기 위함.
		log.info("fileUpload 호출 성공");
		
		String real_name=null;
		//MultipartFile 클래스의 getFile() 메서드로 클라이언트가 업로드한 파일명을 얻어온다.
		String org_name = file.getOriginalFilename(); //원본 이름 받아오기
		log.info("org_name : " + org_name);
		
		//받아온 파일명이 중복될 수 있으므로 중복되지 않도록 파일명을 변경한다. C://uploadStorage//board//board_0000000000_a.gif
		if(org_name !=null && (!org_name.equals(""))) {
			real_name = fileName +"_"+System.currentTimeMillis()+"_"+org_name; 
			//저장할 파일 이름을 변경하는 것은 마음대로 지정할 수 있음.(중복만 안되게)+원본 이름은 그대로 유지하면서 실제 서버에 저장할 이름으로는 원하는 파일명을 만든다.
			
			String docRoot = "C://uploadStorage//"+fileName; 
			makeDir(docRoot);//board라는 폴더를 uploadStorage 하위에 생성한다.
			
			File fileAdd = new File(docRoot+"/"+real_name); //파일 생성후
			log.info("업로드할 파일(fileAdd) : "+fileAdd); //C://uploadStorage//board//board_0000000000_a.gif 이 파일명이 완성되는 과정은 여기서 함. 
			
			file.transferTo(fileAdd);//실제 파일 저장은 여기서 함.
		}
		return real_name; //DB에서 인서트 할 수 있도록 저장한 파일의 이름으로 반환해준다.(real_name으로 만든 중복되지 않는 파일명으로 반환한다.)
	}
	
	//원본 이미지, 이미지의 크기를 줄인 썸네일 파일, 총 두 개의 이미지 파일이 필요하다.
	/* 파일 썸네일 생성 메서드 */
	public static String makeThumnail(String fileName) throws Exception{
		String dirName = fileName.substring(0, fileName.indexOf("_"));
		//0번째부터 _전까지 파일의 이름을 잘라와서 이미지가 존재하는 폴더를 추출해온다.
		String imgPath = "C://uploadStorage//"+dirName; // C://uploadStorage//board를 imgPath에 담는다.
		// 추출된 폴더의 실제 경로(물리적 위치: C:\....)
		File fileAdd=new File(imgPath, fileName); // C://uploadStorage//board//board_000000_a.gif를 읽어올 수 있다.
		log.info("원본 이미지 파일(fileAdd) : "+fileAdd);
		
		BufferedImage sourceImg = ImageIO.read(fileAdd);
		BufferedImage destImg = Scalr.resize(sourceImg, Scalr.Method.AUTOMATIC,Scalr.Mode.FIT_TO_HEIGHT, 133);
		// 							resize(대상[BufferedImage 타입], 원본비율, 높이 또는 너비, 크기) 조정한 이미지를 destImg에 넣는다.
		
		String thumbnailName = "thumbnail_"+fileName; // thumbnail_board_000000_a.gif
		String docRoot = imgPath+"/thumbnail"; // C://uploadStorage//board//thumbnail
		makeDir(docRoot); //썸네일 폴더를 만들어준다.
		
		File newFile = new File(docRoot, thumbnailName); // C://uploadStorage//board//thumbnail//thumbnail_board_000000_a.gif
		log.info("업로드할 파일(newFile) : " + newFile);
		
		//확장자를 주어야 원하는 위치에 저장할 수 있다.
		String formatName = fileName.substring(fileName.lastIndexOf(".")+1);
		//마지막 .의 위치를 찾아 . 다음부터 추출하여 확장자를 추출해온다.
		log.info("확장자(formatName): "+formatName);
		
		ImageIO.write(destImg, formatName, newFile);//만들어낸 썸네일 주소를 보낸다.
		return thumbnailName;
	}
	
	//게시판의 글이 지워질 때 이미지를 지울 때도 업로드 된 파일, 썸네일 파일도 같이 지워야 한다.
	/* 파일 삭제 메서드 */
	public static void fileDelete(String fileName) throws IOException{
		log.info("fileDelete 호출 성공");
		boolean result = false;
		String startDirName = "", docRoot = "";
		String dirName = fileName.substring(0, fileName.indexOf("_"));
		
		if(dirName.equals("thumbnail")) {
			startDirName=fileName.substring(dirName.length()+1, fileName.indexOf("_", dirName.length()+1));
			docRoot = "C://uploadStorage//"+startDirName+"//"+dirName;
		}else {
			docRoot = "C://uploadStorage//"+dirName;
		}
		
		File fileDelete = new File(docRoot+"/"+fileName);
		log.info("삭제할 파일(fileDelete) : "+fileDelete);
		if(fileDelete.exists() && fileDelete.isFile()) {
			result = fileDelete.delete();
		}
		log.info("파일 삭제 여부(true/false): "+result);
	} //반환형을 void를 주었으므로 반환받지 않음.
}
