package com.spring.common.log;

import java.util.Arrays;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.springframework.stereotype.Component;

//import com.spring.client.board.vo.BoardVO;

import lombok.extern.log4j.Log4j;

@Log4j
@Component/*스프링에서 빈(bean)으로 인식하기 위해서 사용*/
@Aspect/*해당 클래스의 객체가 Aspect를 구현한 것임으로 나타내기 위해서 사용*/
public class LoggerAdvice {
	/* execution(@execution) 메서드를 기준으로 Pointcut을 설정 */
	
	/* @Before("execution(* com.spring..*Impl.*(..))&& args(bvo)")
	public void printLogging(BoardVO bvo) {
		log.info("-----------------------");
		log.info("[공통 로그 LogJ비즈니스 로직 수행 전 동작");
		log.info("-----------------------");
		log.info("BoardVO 타입의 bvo 파라미터 값: "+bvo);
		
	} */
	
	@Before("execution(* com.spring..*Impl.*(..))")
	public void printLogging(JoinPoint jp) {
		log.info("-----------------------");
		log.info("[공통 로그 LogJ비즈니스 로직 수행 전 동작");
		//getArgs():전달되는 모든 파라미터들을 Object의 배열로 가져온다.
		//getSignature(): 실행하는 대상 객체의 대한 정보를 알아낼 때 사용한다.
		log.info("[호출 메서드명] "+jp.getSignature().getName());
		log.info("[호출 메서드의 파라미터값] "+Arrays.toString(jp.getArgs()));
		log.info("-----------------------");
		
	}
}
