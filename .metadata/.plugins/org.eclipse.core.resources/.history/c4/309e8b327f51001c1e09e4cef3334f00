<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html>
	<head> 
		<meta charset="UTF-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge, chrome=1" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no" />
      	<link rel="shortcut icon" href="/resources/image/icon.png" />
		<link rel="apple-touch-icon" href="/resources/image/icon.png" />
		<!--[if lt IE 9]>
		<script src="/resources/js/html5shiv.js"></script>
		<![endif]-->
		<script type="text/javascript" src="/resources/include/js/common.js"></script>
		<script type="text/javascript" src="/resources/include/js/jquery-1.12.4.min.js"></script>
		<script type="text/javascript">
			$(function(){
				/* 기본 댓글 목록 불러오기 */
				let b_num = ${detail.b_num};
				listAll(b_num);
				
				/** 댓글 입력을 위한 ajax 연동 처리하기 **/
				$("#replyInsert").click(function(){
					let insertUrl = "/replies/replyInsert";
			/* JSON.stringify(): Javascript 값이나 객체를 JSON 문자열로 반환하는 함수이다. */
					let value=JSON.stringify({
						//받아오는 값(value)을 문자열로 반환한다 !
						b_num:b_num,
						r_name:$("#r_name").val(),
						r_pwd:$("#r_pwd").val(),
						r_content:$("#r_content").val()
					});
			
				/** 글 저장을 위한 POST 방식으로 Ajax 연동 처리하기 **/
					$.ajax({
						url : insertUrl, //전송할 url
						type : "post", //전송 시의 method 방식 
						headers : { //text형식의 xml이 아닌 json 타입으로 받아온다는 것을 headers에 명시해준다.
							"Content-Type":"application/json"
						},
						dataType: "text", //응답 결과를 text로 받을 것.
						data:value, //서버측에 전달할 parameter 값은 value이다 라는 것을 명시.
						error:function(){
							alert('시스템 오류입니다. 관리자에게 문의하세요.');
						},
						beforeSend:function(){//데이터를 전송하기 전에 유효성 체크 할 수 있음.
							if(!chkData("#r_name", "작성자를 ")) return false;
							else if(!chkData("#r_content", "댓글 내용을 ")) return false;
							else if(!chkData("#r_pwd", "비밀번호를 ")) return false;
						},
						success:function(result){
							if(result=="SUCCESS"){
								alert('댓글 등록이 완료되었습니다.');
								dataReset();
							//입력 성공 후에는 입력폼에 있는 데이터 리셋시키기(함수 밑에 만듦).
								listAll(b_num);
							//그리고 다시 조회하여 새로 입력된 댓글을 가져와서 보여준다.
							}
						}
					});
				});
				
			}); //최상위 함수 종료.
		
			
			let replyNum, message = "작성시 입력한 비밀번호를 입력해주세요!", btnkind="";
			/** 댓글 목록 보여주는 함수 */
			function listAll(b_num){
				$("#comment_list").html("");
				let url="/replies/all/"+b_num;
				
				$.getJSON(url, function(data){
				//function의 매개변수 이름은 임의적으로 정할 수 있음.(data)
					console.log("list count: "+data.length);
							//댓글 목록 배열의 길이만큼을 가지고 온다. 
					replyCnt = data.length;
					$(data).each(function(){
						//반복문 사용.
						var r_num = this.r_num;
						var r_name = this.r_name;
						var r_content = this.r_content;
						var r_date = this.r_date;
				/*  브라우저에서는 \n을 자동으로 줄바꿈으로 인식하지 않기 떄문에 내용입력단에 줄바꿈 형태 변환 코드를 추가한다.
				자바에서는 엔터가 2바이트이기 때문에, (\r\n)과 \r일때, 그리고 \n일때도 모두 <br />로 변경하겠다는 정규표현식과 변형식.
				(서비스단에서 처리해도 되지만, ajax로 받아오면서부터 줄바꿈을 보여주기 위해 여기서 줄바꿈을 제어한다.)
					★\r도 엔터로 간주됨  */
						r_content = r_content.replace(/(\r\n|\r|\n)/g, "<br />");
						//위의 데이터를 모두 JSON으로 받아오고, 그 다음 addNewItem함수로 넘어간다.
						addNewItem(r_num, r_name, r_content, r_date);
					});
				}).fail(function(){
					//호출에 실패했을 경우 부르는 함수. ajax에서는 error의 역할을 함.
					alert("댓글 목록을 불러오는데 실패하였습니다. 잠시후에 다시 시도해주세요.");
				});
			}
			
			
			
			/* 새로운 글을 화면에 보여주기 위한 함수
				필요한 시점에 태그를 만들어서 사용할 수도 있다.(jquery 함수 특성)
				생성한 객체명에 주의하며 확인해야함(틀리면 큰일나용)
			*/
			function addNewItem(r_num, r_name, r_content, r_date){
				//새로운 값이 추가될 li태그 객체 생성
				let new_li = $("<li>");
				new_li.attr("data-num", r_num);
				//new_li.addClass("comment_item"); 
				//css 디자인 요소 부여할 클래스.(생략 가능)
				
				//작성자 정보가 저장될 <p>태그
				let writer_p=$("<p>");
				//writer_p.addClass("writer");
				
				//작성자 정보의 이름
				let name_span=$("<span>");
				name_span.html(r_name+" 님");
				//name_span.addClass("name");
				
				//작성일시
				var date_span = $("<span>");
				date_span.html(" / "+r_date+" ");
				
				//수정하기 버튼
				var up_input = $("<input>");
				up_input.attr({"type" : "button", "value" : "수정하기"});
				up_input.addClass("update_btn");
				//이 addClass는 버튼을 식별하기 위한 식별자로 사용할 class명임.(생략 X)
				
				//삭제하기 버튼
				var del_input = $("<input>");
				del_input.attr({"type" : "button", "value" : "삭제하기"});
				del_input.addClass("delete_btn");
				
				//내용
				var content_p = $("<p>");
				content_p.html(r_content);
				
			//위의 태그들 조립하기<li><p><span></span><span></span><input><input></p><p></p></li>
				writer_p.append(name_span).append(date_span).append(up_input).append(del_input)
				new_li.append(writer_p).append(content_p);
			//writer_p태그에 조립한 요소를 new_li태그에 다시 조립.
				$("#comment_list").append(new_li);
			//body에 있는 ul태그에 모두 조립한 new_li를 넣어준다.
			}
			
			function dataReset(){
				$("#writeForm").each(function(){
					this.reset();
				});
			}
		</script>
		
		<title>댓글 화면</title>
	</head>
	
	<body>
		<div id="replyContainer">
			<div id="comment_write">
				<!-- 입력화면 구현하기 -->
				<form id="writeForm">
					<label class="text-left">작성자 <input type="text" id="r_name" name="r_name" /></label>
					<label class="text-left">비밀번호 <input type="password" id="r_pwd" name="r_pwd" /></label>
					<label><input type="button" value="저장하기" id="replyInsert"></label>
					<br />
					<label class="text-left">댓글내용 <textarea id="r_content" name="r_content"></textarea></label>
				</form>
			</div>
			<ul id="comment_list">
				<!-- 여기에 동적 생성 요소가 들어가게 됩니다. -->
			</ul>
		</div>
	</body>
</html>