/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.54
 * Generated at: 2021-12-02 01:43:23 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class reply_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/C:/springCoding/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/lastProject/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1637024497083L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("	<head> \r\n");
      out.write("		<meta charset=\"UTF-8\">\r\n");
      out.write("		<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge, chrome=1\" />\r\n");
      out.write("		<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no\" />\r\n");
      out.write("      	<link rel=\"shortcut icon\" href=\"/resources/image/icon.png\" />\r\n");
      out.write("		<link rel=\"apple-touch-icon\" href=\"/resources/image/icon.png\" />\r\n");
      out.write("		<!--[if lt IE 9]>\r\n");
      out.write("		<script src=\"/resources/js/html5shiv.js\"></script>\r\n");
      out.write("		<![endif]-->\r\n");
      out.write("		<script type=\"text/javascript\" src=\"/resources/include/js/common.js\"></script>\r\n");
      out.write("		<script type=\"text/javascript\" src=\"/resources/include/js/jquery-1.12.4.min.js\"></script>\r\n");
      out.write("		<script type=\"text/javascript\">\r\n");
      out.write("		/* 최상위 바깥에 있는 함수들의 변수를 처리하기 위해 최상위 바깥에 사용될 변수를 선언해준다. */\r\n");
      out.write("		let replyNum, message = \"작성시 입력한 비밀번호를 입력해주세요!\", btnKind=\"\";\r\n");
      out.write("		 /* 함수생성은 최상위 바깥, 안쪽 상관없지만 클릭 처리 이벤트는 모두 최상위 안에 있어야 한다. */\r\n");
      out.write("		\r\n");
      out.write("			$(function(){\r\n");
      out.write("				/* 페이지 로딩되자마자 기본 댓글 목록 불러오기 */\r\n");
      out.write("				let b_num = ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${detail.b_num}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(";\r\n");
      out.write("				listAll(b_num);\r\n");
      out.write("				\r\n");
      out.write("				/** 저장하기 버튼을 클릭 시 댓글 입력을 위한 ajax 연동 처리하기 **/\r\n");
      out.write("				$(\"#replyInsert\").click(function(){\r\n");
      out.write("					let insertUrl = \"/replies/replyInsert\";\r\n");
      out.write("			/* JSON.stringify(): Javascript 값이나 객체를 JSON 문자열로 반환하는 함수이다. */\r\n");
      out.write("					let value=JSON.stringify({\r\n");
      out.write("				/*받아오는 값(value)을 문자열로 반환하는 것을 선언하여 ajax로 서버 전송 요청을 하는 과정 !\r\n");
      out.write("					데이터가 여러개이므로 변수 선언을 하여 미리 변환해준다.\r\n");
      out.write("				*/\r\n");
      out.write("						b_num:b_num,\r\n");
      out.write("						r_name:$(\"#r_name\").val(),\r\n");
      out.write("						r_pwd:$(\"#r_pwd\").val(),\r\n");
      out.write("						r_content:$(\"#r_content\").val()\r\n");
      out.write("					});\r\n");
      out.write("			\r\n");
      out.write("				/** 글 저장을 위한 POST 방식으로 Ajax 연동 처리하기 **/\r\n");
      out.write("					$.ajax({\r\n");
      out.write("						url : insertUrl, //전송할 url\r\n");
      out.write("						type : \"post\", //전송 시의 method 방식 \r\n");
      out.write("						headers : { \r\n");
      out.write("						//text형식의 xml이 아닌 json 타입으로 받아온다는 것을 headers에 명시해준다.\r\n");
      out.write("							\"Content-Type\":\"application/json\"\r\n");
      out.write("						},\r\n");
      out.write("						dataType: \"text\", //응답 결과를 text로 받을 것.\r\n");
      out.write("						data: value, //서버측에 전달할 parameter 값은 문자형으로 변환한 변수인 value이다 라는 것을 명시.\r\n");
      out.write("						error:function(){\r\n");
      out.write("							alert('시스템 오류입니다. 관리자에게 문의하세요.');\r\n");
      out.write("						},\r\n");
      out.write("						beforeSend:function(){//데이터를 전송하기 전에 유효성 체크 할 수 있음.\r\n");
      out.write("							if(!chkData(\"#r_name\", \"작성자를 \")) return false;\r\n");
      out.write("							else if(!chkData(\"#r_content\", \"댓글 내용을 \")) return false;\r\n");
      out.write("							else if(!chkData(\"#r_pwd\", \"비밀번호를 \")) return false;\r\n");
      out.write("						},\r\n");
      out.write("						success:function(result){\r\n");
      out.write("							if(result==\"success\"){\r\n");
      out.write("					/*\"success\"는 대소문자 구분하기 때문에 서버측에서부터 소문자를 사용해야함.\r\n");
      out.write("					(서비스 구현클래스에서 반환값에서 설정.)*/\r\n");
      out.write("								alert('댓글 등록이 완료되었습니다.');\r\n");
      out.write("								dataReset();\r\n");
      out.write("						//입력 성공 후에는 입력폼에 있는 데이터 리셋시키기(함수 밑에 만듦).\r\n");
      out.write("								listAll(b_num);\r\n");
      out.write("						//그리고 다시 조회하여 새로 입력된 댓글을 가져와서 보여준다.\r\n");
      out.write("							}\r\n");
      out.write("						}\r\n");
      out.write("					}); //ajax 종료.\r\n");
      out.write("				}); //클릭 종료.\r\n");
      out.write("				\r\n");
      out.write("				/** \"수정하기\" 버튼 클릭 시 수정 폼 출력(폼도 동적으로 필요한 시점에 생성한다.) **/\r\n");
      out.write("				$(document).on(\"click\", \".update_form\", function(){\r\n");
      out.write("				/* 동적으로 생성한 버튼은 click함수가 아닌 on 함수로 처리하는데 \r\n");
      out.write("				이때 매개변수는 세개(첫번째는 클릭 이벤트, 이벤트가 발생할(클릭한) 대상, 처리할 함수)\r\n");
      out.write("				일단은 클릭 이벤트이기 때문에 최상위 안에 함수가 존재해야함.*/\r\n");
      out.write("				\r\n");
      out.write("					$(\".reset_btn\").click();\r\n");
      out.write("					let currLi = $(this).parents(\"li\");//이벤트가 발생한 자신의 부모태그 li를 찾아온다.\r\n");
      out.write("					replyNum = currLi.attr(\"data-num\");\r\n");
      out.write("					pwdReset(this);//비밀번호 입력화면 리셋시키기(밑에 함수 만듦)\r\n");
      out.write("					pwdView(currLi);//비밀번호 확인 폼(밑에 함수 만듦)\r\n");
      out.write("					btnKind=\"upBtn\"; //수정버튼인지 삭제버튼인지를 확인하기 위한 변수.\r\n");
      out.write("				});\r\n");
      out.write("				\r\n");
      out.write("				\r\n");
      out.write("				/** 수정화면에서 수정취소 버튼(초기화) 클릭 시 이벤트 처리 **/\r\n");
      out.write("				$(document).on(\"click\", \".reset_btn\", function(){\r\n");
      out.write("					btnKind=\"\"; //다시 버튼 초기화\r\n");
      out.write("					\r\n");
      out.write("					let conText = $(this).parents(\"li\").find(\"textarea\").html();\r\n");
      out.write("					conText = conText.replace(/(\\r\\n|\\r|\\n)/g, \"<br />\");\r\n");
      out.write("					$(this).parents(\"li\").find(\"input[type='button']\").show();\r\n");
      out.write("					//수정폼이 입력되면서부터 숨겼던 수정하기, 삭제하기 버튼을 다시 보여준다.\r\n");
      out.write("					\r\n");
      out.write("					let conArea = $(this).parents(\"li\").children().eq(1);\r\n");
      out.write("					//이벤트가 발생한 자신의.부모태그의.자식(p태그).의 위치eq(1);\r\n");
      out.write("					conArea.html(conText);\r\n");
      out.write("					//기존에 있는 값을 html을 사용하면 덮어쓸 수 있음.(원래대로 내용 글자가 나오게 만듦.)\r\n");
      out.write("				});\r\n");
      out.write("				\r\n");
      out.write("				/** 수정화면에서 수정완료 버튼 클릭시 수정처리를 위한 Ajax 연동 처리 **/\r\n");
      out.write("				$(document).on(\"click\", \".update_btn\", function(){\r\n");
      out.write("					let r_num = $(this).parents(\"li\").attr(\"data-num\");\r\n");
      out.write("					let r_content = $(\"#content\").val();\r\n");
      out.write("					//댓글 번호와 내용의 value를 찾아온다.\r\n");
      out.write("					\r\n");
      out.write("					if(!chkData(\"#content\", \"댓글 내용을\")) return;\r\n");
      out.write("					else {\r\n");
      out.write("						$.ajax({\r\n");
      out.write("							url : '/replies/'+r_num,\r\n");
      out.write("							type: \"put\",\r\n");
      out.write("							headers : {\r\n");
      out.write("								\"Content-Type\": \"application/json\",\r\n");
      out.write("								\"X-HTTP-Method-Override\": \"PUT\"\r\n");
      out.write("							},\r\n");
      out.write("							/* 삭제와 수정의 매핑 정보가 같으므로 메서드 방식으로 구분한다. */\r\n");
      out.write("							data: JSON.stringify({r_content:r_content}),\r\n");
      out.write("							dataType: \"text\",\r\n");
      out.write("							error : function(){\r\n");
      out.write("								alert(\"시스템 오류입니다. 관리자에게 문의하세요.\");\r\n");
      out.write("							},\r\n");
      out.write("							success : function(result){\r\n");
      out.write("								console.log(\"result : \"+result);\r\n");
      out.write("								if(result==\"success\"){\r\n");
      out.write("									alert(\"댓글이 수정되었습니다.\");\r\n");
      out.write("									listAll(b_num);\r\n");
      out.write("								}\r\n");
      out.write("							}\r\n");
      out.write("						});\r\n");
      out.write("					}\r\n");
      out.write("				});\r\n");
      out.write("				\r\n");
      out.write("				\r\n");
      out.write("				/** \"삭제하기\" 버튼 클릭 시 수정 폼 출력(폼도 동적으로 필요한 시점에 생성한다.) **/\r\n");
      out.write("				$(document).on(\"click\", \".delete_btn\", function(){\r\n");
      out.write("				/* 동적으로 생성한 버튼은 click함수가 아닌 on 함수로 처리하는데 \r\n");
      out.write("				이때 매개변수는 세개(첫번째는 클릭 이벤트, 이벤트가 발생할(클릭한) 대상, 처리할 함수)\r\n");
      out.write("				일단은 클릭 이벤트이기 때문에 최상위 안에 함수가 존재해야함.*/\r\n");
      out.write("				\r\n");
      out.write("					$(\".reset_btn\").click();\r\n");
      out.write("				//수정 폼 출력 도중 다른 글의 삭제하기를 눌렀을 경우, 수정 취소를 클릭한 함수를 강제로 줄 수 있다.\r\n");
      out.write("				\r\n");
      out.write("					let currLi = $(this).parents(\"li\");//이벤트가 발생한 자신의 부모태그 li를 찾아온다.\r\n");
      out.write("					replyNum = currLi.attr(\"data-num\");\r\n");
      out.write("					pwdReset(this);//비밀번호 입력화면 리셋시키기(밑에 함수 만듦)\r\n");
      out.write("					pwdView(currLi);//비밀번호 확인 폼(밑에 함수 만듦)\r\n");
      out.write("					btnKind=\"delBtn\"; //수정버튼인지 삭제버튼인지를 확인하기 위한 변수.\r\n");
      out.write("				});\r\n");
      out.write("				\r\n");
      out.write("				/* 비밀번호 입력 폼에서 \"취소\"버튼 클릭시 처리 이벤트 */\r\n");
      out.write("				$(document).on(\"click\", \".pwdResetBut\", function(){\r\n");
      out.write("					pwdReset(this);//입력 폼 사라지게 하는 함수.\r\n");
      out.write("				});\r\n");
      out.write("				\r\n");
      out.write("				/* 비밀번호 입력 양식에 커서 주어졌을 경우 처리 이벤트 */\r\n");
      out.write("				$(document).on(\"focus\", \".passwd\", function(){\r\n");
      out.write("					$(this).val(\"\");\r\n");
      out.write("					let span=$(this).parents(\"form\").find(\"span\");\r\n");
      out.write("					//span.removeClass(\"msg_error\"); css를 줬을 경우 원래대로 돌리는 코드.\r\n");
      out.write("					//span.addClass(\"msg_default\");\r\n");
      out.write("					span.html(message);\r\n");
      out.write("				});\r\n");
      out.write("				\r\n");
      out.write("				/** 비밀번호 확인 버튼 클릭 시 처리 이벤트. **/\r\n");
      out.write("				$(document).on(\"click\", \".pwdCheckBut\", function(){\r\n");
      out.write("					var li = $(this).parents(\"li\");\r\n");
      out.write("					var form = $(this).parents(\"form\");\r\n");
      out.write("					var pwd = form.find(\".passwd\");\r\n");
      out.write("					var msg = form.find(\".msg\");\r\n");
      out.write("					var result = 0;\r\n");
      out.write("					\r\n");
      out.write("					if(!formCheck(pwd, msg, \"비밀번호를\")) return;\r\n");
      out.write("					//비밀번호 유효성 체크.\r\n");
      out.write("					else{\r\n");
      out.write("						$.ajax({//json이 아닌 일반 ajax로 매핑 요청.\r\n");
      out.write("							url : \"/replies/pwdConfirm\",\r\n");
      out.write("							type : \"POST\",\r\n");
      out.write("							data : \"r_num=\"+replyNum+\"&r_pwd=\"+pwd.val(),\r\n");
      out.write("							dataType : \"text\",\r\n");
      out.write("							error:function(){\r\n");
      out.write("								alert(\"시스템 오류입니다. 관리자에게 문의하세요.\");\r\n");
      out.write("							},\r\n");
      out.write("							success:function(resultData){\r\n");
      out.write("								console.log(\"resultData : \"+resultData);\r\n");
      out.write("								if(resultData==0){//비밀번호가 일치하지 않는 경우\r\n");
      out.write("									msg.addClass(\"msg_error\");\r\n");
      out.write("									msg.text(\"입력한 비밀번호가 일치하지 않습니다.\");\r\n");
      out.write("								}else if(resultData==1){//비밀번호가 일치하는 경우\r\n");
      out.write("									pwdReset(form);\r\n");
      out.write("								// console.log(\"비밀번호가 일치합니다.\");\r\n");
      out.write("									\r\n");
      out.write("								console.log(\"btnKind : \"+btnKind);\r\n");
      out.write("									if(btnKind==\"upBtn\"){\r\n");
      out.write("										updateForm(li);\r\n");
      out.write("									}\r\n");
      out.write("									else if(btnKind==\"delBtn\"){\r\n");
      out.write("										deleteBtn(b_num);\r\n");
      out.write("									}\r\n");
      out.write("									btnKind=\"\"; \r\n");
      out.write("								}\r\n");
      out.write("							}\r\n");
      out.write("							\r\n");
      out.write("						});\r\n");
      out.write("					}\r\n");
      out.write("				});\r\n");
      out.write("				\r\n");
      out.write("				\r\n");
      out.write("			}); //최상위 함수 종료.\r\n");
      out.write("			\r\n");
      out.write("			/** 수정 폼 화면 구현 함수 */\r\n");
      out.write("			function updateForm(currLi){\r\n");
      out.write("				let conArea = currLi.children().eq(1);\r\n");
      out.write("				/*댓글이 있는 위치 찾아오기.(addNewItem 함수에서 생성한 태그들의 위치를 F12 요소에서 찾아볼 수 있다.)\r\n");
      out.write("				p태그의 인덱스가 0번째가 아닌 1번째 p태그에 댓글 내용이 있기 때문에 eq(1)임.*/\r\n");
      out.write("				\r\n");
      out.write("				let conText = conArea.html();\r\n");
      out.write("				//해당 위치의 댓글 내용을 가져온다.\r\n");
      out.write("				conText = conText.replace(/(<br>|<br\\/>|<br \\/>)/g, '\\r\\n');\r\n");
      out.write("				/* 수정할 때 두 줄 이상 입력되었다면 textarea의 <br />태그를 다시 자바용 엔터인 \\r\\n으로 변경해주어야 한다.\r\n");
      out.write("				여기서 정규표현식은 <br><br/><br />사용 형식에 상관없이 모두 \\r\\n으로 변형한다는 것. */\r\n");
      out.write("				\r\n");
      out.write("				console.log(\"conText: \" + conText);//댓글 내용 맞는지 확인.\r\n");
      out.write("								\r\n");
      out.write("				currLi.find(\"input[type='button']\").hide();\r\n");
      out.write("				//댓글 옆의 수정버튼과 삭제버튼을 숨김처리.\r\n");
      out.write("				conArea.html(\"\");\r\n");
      out.write("							\r\n");
      out.write("				let update_area = $(\"<span>\");\r\n");
      out.write("				update_area.addClass(\"update_area\");\r\n");
      out.write("							\r\n");
      out.write("				let textarea = $(\"<textarea>\");\r\n");
      out.write("				textarea.attr({\"name\" : \"content\", \"id\" : \"content\"});\r\n");
      out.write("				/*댓글 내용을 식별할 수 있는 아이디를 준다.\r\n");
      out.write("				(body에서 준 아이디와 겹치면 안되므로 r_content가 아닌 그냥 content로 설정.)*/\r\n");
      out.write("				textarea.html(conText);\r\n");
      out.write("							\r\n");
      out.write("				let update_btn = $(\"<input>\");\r\n");
      out.write("				update_btn.attr({\"type\" : \"button\", \"value\" : \"수정완료\"});\r\n");
      out.write("				update_btn.addClass(\"update_btn\");\r\n");
      out.write("							\r\n");
      out.write("				let reset_btn = $(\"<input>\");\r\n");
      out.write("				reset_btn.attr({\"type\" : \"button\", \"value\" : \"수정취소\"});\r\n");
      out.write("				reset_btn.addClass(\"reset_btn\");\r\n");
      out.write("				\r\n");
      out.write("				//동적 태그 조립하기.\r\n");
      out.write("				update_area.append(textarea).append(update_btn).append(reset_btn);\r\n");
      out.write("				conArea.html(update_area);\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("			/** 댓글 목록 보여주는 함수 */\r\n");
      out.write("			function listAll(b_num){\r\n");
      out.write("				$(\"#comment_list\").html(\"\");\r\n");
      out.write("				let url=\"/replies/all/\"+b_num;\r\n");
      out.write("				\r\n");
      out.write("				$.getJSON(url, function(data){\r\n");
      out.write("				//function의 매개변수 이름은 임의적으로 정할 수 있음.(data)\r\n");
      out.write("					console.log(\"list count: \"+data.length);\r\n");
      out.write("							//댓글 목록 배열의 길이만큼을 가지고 온다. \r\n");
      out.write("					replyCnt = data.length;\r\n");
      out.write("					$(data).each(function(){\r\n");
      out.write("						//반복문 사용.\r\n");
      out.write("						var r_num = this.r_num;\r\n");
      out.write("						var r_name = this.r_name;\r\n");
      out.write("						var r_content = this.r_content;\r\n");
      out.write("						var r_date = this.r_date;\r\n");
      out.write("				/*  브라우저에서는 \\n을 자동으로 줄바꿈으로 인식하지 않기 떄문에 내용입력단에 줄바꿈 형태 변환 코드를 추가한다.\r\n");
      out.write("				자바에서는 엔터가 2바이트이기 때문에, (\\r\\n)과 \\r일때, 그리고 \\n일때도 모두 <br />로 변경하겠다는 정규표현식과 변형식.\r\n");
      out.write("				(서비스단에서 처리해도 되지만, ajax로 받아오면서부터 줄바꿈을 보여주기 위해 여기서 줄바꿈을 제어한다.)\r\n");
      out.write("					★ \\r도 엔터로 간주됨 ★ */\r\n");
      out.write("						r_content = r_content.replace(/(\\r\\n|\\r|\\n)/g, \"<br />\");\r\n");
      out.write("						//위의 데이터를 모두 JSON으로 받아오고, 그 다음 addNewItem함수로 넘어간다.\r\n");
      out.write("						addNewItem(r_num, r_name, r_content, r_date);\r\n");
      out.write("					});\r\n");
      out.write("				}).fail(function(){\r\n");
      out.write("					//호출에 실패했을 경우 부르는 함수. ajax에서는 error의 역할을 함.\r\n");
      out.write("					alert(\"댓글 목록을 불러오는데 실패하였습니다. 잠시후에 다시 시도해주세요.\");\r\n");
      out.write("				});\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			/* \r\n");
      out.write("				새로운 글을 화면에 보여주기 위한 함수\r\n");
      out.write("				필요한 시점에 동적으로 태그를 만들어서 사용할 수도 있다.(jquery 함수 특성)\r\n");
      out.write("				생성한 객체명에 주의하며 확인해야함(틀리면 큰일나용)\r\n");
      out.write("			*/\r\n");
      out.write("			function addNewItem(r_num, r_name, r_content, r_date){\r\n");
      out.write("				//새로운 값이 추가될 li태그 객체 생성\r\n");
      out.write("				let new_li = $(\"<li>\");\r\n");
      out.write("				new_li.attr(\"data-num\", r_num);\r\n");
      out.write("				//new_li.addClass(\"comment_item\"); \r\n");
      out.write("				//css 디자인 요소 부여할 클래스.(생략 가능)\r\n");
      out.write("				\r\n");
      out.write("				//작성자 정보가 저장될 <p>태그\r\n");
      out.write("				let writer_p=$(\"<p>\");\r\n");
      out.write("				//writer_p.addClass(\"writer\");\r\n");
      out.write("				\r\n");
      out.write("				//작성자 정보의 이름\r\n");
      out.write("				let name_span=$(\"<span>\");\r\n");
      out.write("				name_span.html(r_name+\" 님\");\r\n");
      out.write("				//name_span.addClass(\"name\");\r\n");
      out.write("				\r\n");
      out.write("				//작성일시\r\n");
      out.write("				var date_span = $(\"<span>\");\r\n");
      out.write("				date_span.html(\" / \"+r_date+\" \");\r\n");
      out.write("				\r\n");
      out.write("				//수정하기 버튼(동적으로 추가한 버튼은 click함수를 사용할 수 없다.)\r\n");
      out.write("				var up_input = $(\"<input>\");\r\n");
      out.write("				up_input.attr({\"type\" : \"button\", \"value\" : \"수정하기\"});\r\n");
      out.write("				up_input.addClass(\"update_form\");\r\n");
      out.write("				//이 addClass는 버튼을 식별하기 위한 식별자로 사용할 class명임.(생략 X)\r\n");
      out.write("				\r\n");
      out.write("				//삭제하기 버튼\r\n");
      out.write("				var del_input = $(\"<input>\");\r\n");
      out.write("				del_input.attr({\"type\" : \"button\", \"value\" : \"삭제하기\"});\r\n");
      out.write("				del_input.addClass(\"delete_btn\");\r\n");
      out.write("				\r\n");
      out.write("				//내용 들어갈 태그 추가하기\r\n");
      out.write("				var content_p = $(\"<p>\");\r\n");
      out.write("				content_p.html(r_content);\r\n");
      out.write("				\r\n");
      out.write("			//위의 태그들 조립하기<li><p><span></span><span></span><input><input></p><p></p></li>\r\n");
      out.write("				writer_p.append(name_span).append(date_span).append(up_input).append(del_input)\r\n");
      out.write("				new_li.append(writer_p).append(content_p);\r\n");
      out.write("			//writer_p태그에 조립한 요소를 new_li태그에 다시 조립.\r\n");
      out.write("				$(\"#comment_list\").append(new_li);\r\n");
      out.write("			//body에 있는 ul태그에 모두 조립한 new_li를 넣어준다.\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("			/* 입력 폼 초기화 함수 (ajax에서 success시 사용됨.) */\r\n");
      out.write("			function dataReset(){\r\n");
      out.write("				$(\"#writeForm\").each(function(){\r\n");
      out.write("					this.reset();\r\n");
      out.write("				});\r\n");
      out.write("			}\r\n");
      out.write("		/*	※(참고)입력 폼 초기화 함수: 일일이 리셋시킬 수도 있다.※\r\n");
      out.write("		function dataReset(){\r\n");
      out.write("			$(\"#r_name\").val(\"\");\r\n");
      out.write("			$(\"#r_pwd\").val(\"\");\r\n");
      out.write("			$(\"#r_content\").val(\"\");\r\n");
      out.write("			} */\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("			/** 비밀번호 체크를 위한 화면 구현 **/ \r\n");
      out.write("			function pwdView(area){\r\n");
      out.write("				let pwd_div = $(\"<div>\");\r\n");
      out.write("				pwd_div.addClass(\"pwdArea\");\r\n");
      out.write("				//전체를 감싸는 div 태그 생성\r\n");
      out.write("							\r\n");
      out.write("				let pwd_form = $(\"<form>\");\r\n");
      out.write("				pwd_form.attr(\"name\", \"f_pwd\");\r\n");
      out.write("							\r\n");
      out.write("				let pwd_label = $(\"<label>\");\r\n");
      out.write("				pwd_label.attr(\"for\", \"passwd\");\r\n");
      out.write("				pwd_label.html(\"비밀번호 : \");\r\n");
      out.write("						\r\n");
      out.write("				let pwd_input = $(\"<input>\");\r\n");
      out.write("				pwd_input.attr({\"type\" : \"password\", \"name\" : \"passwd\"});\r\n");
      out.write("				pwd_input.addClass(\"passwd\");\r\n");
      out.write("				pwd_input.prop(\"autofocus\",\"autofocus\");\r\n");
      out.write("				//비밀번호 입력받을 화면 생성, 커서가 자동으로 들어가도록 autofocus를 추가.\r\n");
      out.write("							\r\n");
      out.write("				let pwd_check = $(\"<input>\");\r\n");
      out.write("				pwd_check.attr({\"type\" : \"button\", \"value\" : \"확인\"});\r\n");
      out.write("				pwd_check.addClass(\"pwdCheckBut\");\r\n");
      out.write("				//비밀번호 확인 버튼 동적으로 생성. 동적 버튼은 class로 식별한다.\r\n");
      out.write("							\r\n");
      out.write("				let pwd_reset = $(\"<input>\");\r\n");
      out.write("				pwd_reset.attr({\"type\" : \"button\", \"value\" : \"취소\"});\r\n");
      out.write("				pwd_reset.addClass(\"pwdResetBut\");\r\n");
      out.write("							\r\n");
      out.write("				let pwd_span = $(\"<span>\");\r\n");
      out.write("				pwd_span.addClass(\"msg\");\r\n");
      out.write("				pwd_span.html(message);\r\n");
      out.write("				\r\n");
      out.write("				//만든 동적 태그들 조립하기. 태그를 조립한 폼을 전체를 감싸는 div에 넣어준다.\r\n");
      out.write("				pwd_form.append(pwd_label).append(pwd_input).append(pwd_check).append(pwd_reset).append(pwd_span);\r\n");
      out.write("				pwd_div.append(pwd_form)\r\n");
      out.write("				area.append(pwd_div);\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			/* 비밀번호 체크 화면에서 \"취소\" 버튼 클릭 처리 */\r\n");
      out.write("			function pwdReset(target){\r\n");
      out.write("				$(\"li .pwdArea\").not(this).html(\"\");\r\n");
      out.write("				//이벤트가 발생한 자기자신을 제외한 나머지는 비밀번호 화면을 지우겠다는 코드.\r\n");
      out.write("				$(target).parents(\"li\").find(\".pwdArea\").html(\"\");\r\n");
      out.write("		//target은 이벤트가 발생한 자기 자신.parents(자기자신의 부모태그 찾기).find(그 부모태그의 하위태그찾기).의 값을 지우겠다;\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("			/** 글 삭제를 위한 Ajax 연동 처리 **/\r\n");
      out.write("			function deleteBtn(b_num){ //삭제 후 조회를 다시 하므로 b_num을 매개변수로 받아온다.\r\n");
      out.write("				if (confirm(\"선택하신 댓글을 삭제하시겠습니까?\")){\r\n");
      out.write("					$.ajax({\r\n");
      out.write("						url : '/replies/' + replyNum,\r\n");
      out.write("					//url에 바로 댓글번호를 요청하는 방식을 사용했으므로 매핑 정보 그대로 바로 요청.\r\n");
      out.write("						type : 'delete',\r\n");
      out.write("						headers : {\r\n");
      out.write("							\"X-HTTP-Method-Override\" : \"DELETE\"\r\n");
      out.write("						//전송하는 메서드가 delete 방식이므로 반드시 해당 메서드를 명시해주어야함.\r\n");
      out.write("						},\r\n");
      out.write("						dataType : \"text\",\r\n");
      out.write("						success : function(result){\r\n");
      out.write("							console.log(\"result : \"+result);\r\n");
      out.write("							if(result == 'success'){\r\n");
      out.write("								alert(\"삭제 완료되었습니다.\");\r\n");
      out.write("								listAll(b_num);\r\n");
      out.write("							}\r\n");
      out.write("						}\r\n");
      out.write("					});\r\n");
      out.write("				}\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("		</script>\r\n");
      out.write("		\r\n");
      out.write("		<title>댓글 화면</title>\r\n");
      out.write("	</head>\r\n");
      out.write("	\r\n");
      out.write("	<body>\r\n");
      out.write("		<div id=\"replyContainer\">\r\n");
      out.write("			<div id=\"comment_write\">\r\n");
      out.write("				<!-- 입력화면 구현하기 -->\r\n");
      out.write("				<form id=\"writeForm\">\r\n");
      out.write("					<label class=\"text-left\">작성자 <input type=\"text\" id=\"r_name\" name=\"r_name\" /></label>\r\n");
      out.write("					<label class=\"text-left\">비밀번호 <input type=\"password\" id=\"r_pwd\" name=\"r_pwd\" /></label>\r\n");
      out.write("					<label><input type=\"button\" value=\"저장하기\" id=\"replyInsert\"></label>\r\n");
      out.write("					<br />\r\n");
      out.write("					<label class=\"text-left\">댓글내용 <textarea id=\"r_content\" name=\"r_content\"></textarea></label>\r\n");
      out.write("				</form>\r\n");
      out.write("			</div>\r\n");
      out.write("			<ul id=\"comment_list\">\r\n");
      out.write("				<!-- 여기에 동적 생성 요소가 들어가게 됩니다. -->\r\n");
      out.write("			</ul>\r\n");
      out.write("		</div>\r\n");
      out.write("	</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
