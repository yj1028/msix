<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.mapper.TimeMapper">
	
	<select id="getTime2" resultType="java.lang.String">
		select sysdate from dual
	</select>
	
	<!-- ${s_num}으로 사용하게 되면, 값이 직접 들어가게 되는데 num의 타입이 String이므로 ''를 따로 명시해주어야함.
		#{s_num}의 역할은 PreparedStatement의 역할. 바인딩 ?의 역할을 한다.
		{}안에 들어가는 값은 해당 VO의 필드명. -->
	<select id="getSubjectName" parameterType="java.lang.String" resultType="java.lang.String">
		select s_name from subject where s_num = #{s_num}
	</select>
	
	<!-- no를 받아오기때문에 받아오는 타입은 int.
	 결과 타입은 ArrayList가 아닌 VO이다.(xml은 임포트가 없기 때문에 패키지부터 풀네임으로 작성.
	 >를 시작태그가 아닌 단순문자로 만들기 위해 <![CDATA[]]>를 사용한다.-->
	<select id="getSubjects" parameterType="int" resultType="com.spring.example.domain.SubjectVO">
		select no, s_num, s_name from subject
		<![CDATA[ where no > #{no}]]>
	</select>
	<!-- select 쿼리에 (select*from 테이블명) 을 사용가능은 하나, 
	정확하게 찾아올 수 있도록 확실히 찾는 컬럼명을 명시해주는 것이 좋다. -->
	
	<insert id="subjectInsert" parameterType="com.spring.example.domain.SubjectVO">
		insert into subject(no, s_num, s_name)
		values(subject_seq.nextval, #{s_num}, #{s_name})
	</insert>
	
	<update id="subjectUpdate" parameterType="com.spring.example.domain.SubjectVO">
		update subject set s_name=#{s_name} where no=#{no}
	</update>
	<!-- 수정, 삭제의 no는 시퀀스가 아닌 이미 존재하는 값을 선택해야하므로 시퀀스가 아닌 설정되어있는 값을 주어야한다. -->
	
	<delete id="subjectDelete" parameterType="com.spring.example.domain.SubjectVO" >
		delete from subject where no = #{no}
	<!-- 자식테이블에 연결되어있다면, 자식테이블이 소속되지 않은 컬럼만 삭제할 수 있다. --> 
	</delete>
</mapper>